name: Release and Deploy Meshery Cloud
on:
  workflow_call:
    inputs:
      release-environment: 
        description: "Staging or Production (lowercase)"
        required: true
        default: "staging"
        type: string
      release-version:
        description: "e.g. v0.6.26"
        required: true
        default: "latest"
        type: string
    secrets:
      GH_ACCESS_TOKEN: 
        required: true
      DOCKER_USERNAME: 
        required: true
      DOCKER_PASSWORD: 
        required: true
      MESHERY_CLOUD_AWS_PROD_USERNAME:
        required: true
      MESHERY_CLOUD_AWS_STG_HOST:
        required: true
      MESHERY_CLOUD_AWS_PROD_HOST:
        required: true
      MESHERY_CLOUD_AWS_PROD_KEY:
        required: true

  workflow_dispatch:
    inputs:
      release-environment: 
        description: "Staging or Production (lowercase)"
        required: true
        default: "staging"
      release-version: 
        description: "e.g. v0.6.26"
        required: true
        default: "latest"

env:
  GIT_VERSION: ${{inputs.release-version}}

jobs:
  update-doc-release-version:
    name: API Docs
    if: inputs.release-environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: API Docs - Install Redocly
        uses: actions/setup-node@v4
      - run: npm i -g @redocly/cli@latest
      - name: API Docs - Update schema.yml
        uses: fjogeleit/yaml-update-action@v0.13.2
        with:
          repository: l5io/meshery-cloud
          branch: master
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          valueFile: 'models/openapi-schema/schema.yml'
          commitChange: true
          propertyPath: 'info.version'
          value: ${{inputs.release-version}}
          message: Updated meshery-cloud version to ${{inputs.release-version}}
          commitUserName: l5io
          commitUserEmail: l5io@layer5.io
      
  lint-fix:
    name: Lint UI and Backend
    if: inputs.release-environment == 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
          path: meshery-cloud
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.0'
      - name: Install prettier and eslint
        run: |
           npm i -g prettier;
           npm i -g eslint;
      - name: Lint UI and Backend
        run: |
          cd meshery-cloud
          make ui-lint-fix
          make cloud-lint-fix
      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_user_name: l5io
          commit_user_email: l5io@layer5.io
          commit_author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          commit_options: '--signoff'
          commit_message: '[CI] Lint fix backend/ui'
          repository: meshery-cloud

  staging:
    needs: update-doc-release-version
    if: always() && inputs.release-environment == 'staging' 
    name: Staging - Docker build and push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Meshery Cloud code
      uses: actions/checkout@v4
      with:
        path: meshery-cloud
        repository: layer5io/meshery-cloud
        fetch-depth: 1
        token: ${{ secrets.GH_ACCESS_TOKEN }}
    - name: Build Docs
      run:  |
        cd meshery-cloud
        npm i -g @redocly/cli@latest
        make docs-build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Docker Meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: layer5/meshery-cloud
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{inputs.release-environment}}-{{sha}}
            type=raw,value=${{inputs.release-environment}}-{{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{inputs.release-environment}}-latest
            type=raw,value=${{inputs.release-environment}}-${{env.GIT_VERSION}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}        
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push
      uses: docker/build-push-action@v4
      with:
        context: meshery-cloud
        push: true
        build-args: |
          ENVIRONMENT=stg
          GIT_VERSION=${{inputs.release-environment}}-${{inputs.release-version}}
          RELEASE_CHANNEL=${{inputs.release-environment}}
        tags: ${{ steps.meta.outputs.tags }}
        platforms: linux/amd64
    - name: Deploy staging
      if: success()
      uses: appleboy/ssh-action@master
      env:
          GIT_VERSION: ${{inputs.release-version}}
          GIT_COMMITSHA: ${{ github.sha }}
      with:
        host: ${{ secrets.MESHERY_CLOUD_AWS_STG_HOST }}
        username: ${{ secrets.MESHERY_CLOUD_AWS_PROD_USERNAME }}
        key: ${{ secrets.MESHERY_CLOUD_AWS_PROD_KEY }}
        port: 22
        envs: GIT_VERSION,GIT_COMMITSHA
        script: |
          cd meshery-cloud
          sudo su
          git pull https://l5io:${{ secrets.GH_ACCESS_TOKEN }}@github.com/layer5io/meshery-cloud
          docker pull layer5/meshery-cloud:staging-latest
          make stg-deploy
  prod:
    needs: update-doc-release-version
    if: always() && inputs.release-environment == 'production'
    name: Production - Docker build and push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Meshery Cloud code
      uses: actions/checkout@v4
      with:
        repository: layer5io/meshery-cloud
        path: meshery-cloud
        fetch-depth: 1
        token: ${{ secrets.GH_ACCESS_TOKEN }}
    - name: Build Docs
      run:  |
        cd meshery-cloud
        npm i -g @redocly/cli@latest
        make docs-build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Docker Meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: layer5/meshery-cloud
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{inputs.release-environment}}-{{sha}}
            type=raw,value=${{inputs.release-environment}}-{{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{inputs.release-environment}}-latest
            type=raw,value=${{inputs.release-environment}}-${{env.GIT_VERSION}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}        
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push
      uses: docker/build-push-action@v4
      with:
        context: meshery-cloud
        push: true
        build-args: |
          ENVIRONMENT=prod
          GIT_VERSION=${{inputs.release-environment}}-${{inputs.release-version}}
          RELEASE_CHANNEL=${{inputs.release-environment}}
        tags: ${{ steps.meta.outputs.tags }}
        platforms: linux/amd64
    - name: Deploy production
      uses: appleboy/ssh-action@master
      env:
          GIT_VERSION: ${{inputs.release-version}}
          GIT_COMMITSHA: ${{ github.sha }}
      with:
        host: ${{ secrets.MESHERY_CLOUD_AWS_PROD_HOST }}
        username: ${{ secrets.MESHERY_CLOUD_AWS_PROD_USERNAME }}
        key: ${{ secrets.MESHERY_CLOUD_AWS_PROD_KEY }}
        port: 22
        envs: GIT_VERSION,GIT_COMMITSHA
        script: |
          cd meshery-cloud
          sudo su
          git pull https://l5io:${{ secrets.GH_ACCESS_TOKEN }}@github.com/layer5io/meshery-cloud
          ./install/scripts/git-pull.sh
          docker pull layer5/meshery-cloud:production-latest
          make prod-deploy
          
